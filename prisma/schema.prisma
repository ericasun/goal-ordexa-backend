generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

model Order {
  id           String   @id @default(cuid())
  platform     String
  orderId      String   @unique
  customerName String?
  totalAmount  Float
  currency     String
  createdAt    DateTime @default(now())
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String?
  password        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  cartonConfig    CartonConfig[]
  Inventory       Inventory[]
  products        Product[]
  shippingCompany ShippingCompany[]
  shippingFee     ShippingFee[]
}

model Page {
  id        Int      @id @default(autoincrement())
  key       String
  label     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              Int              @id @default(autoincrement())
  model           String
  description     String?
  sku             String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  productHeight   Float?
  productLength   Float?
  productWeight   Float?
  productWidth    Float?
  productName     String
  productAlias    String?
  userId          Int?
  productCategory String?
  cartonConfigs   CartonConfig[]
  inventories     Inventory?
  user            User?            @relation(fields: [userId], references: [id])
  packages        ProductPackage[]
  shippingFees    ShippingFee[]    @relation("ProductShippingFees")
}

model ProductPackage {
  id                  Int            @id @default(autoincrement())
  productId           Int
  packingTemplateName String?
  packageLength       Float
  packageWidth        Float
  packageHeight       Float
  packageWeight       Float
  quantity            Int?
  label               String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  cartonConfigs       CartonConfig[]
  product             Product        @relation(fields: [productId], references: [id])
}

model CartonConfig {
  id                 Int            @id @default(autoincrement())
  cartonLength       Float
  cartonWidth        Float
  cartonHeight       Float
  cartonWeight       Float
  unitsPerCarton     Int
  cartonModel        String?
  createdAt          DateTime       @default(now())
  cartonTemplateName String
  updatedAt          DateTime       @updatedAt
  userId             Int?
  productPackageId   Int            @default(0)
  productId          Int
  product            Product        @relation(fields: [productId], references: [id])
  productPackage     ProductPackage @relation(fields: [productPackageId], references: [id])
  user               User?          @relation(fields: [userId], references: [id])
  shippingFees       ShippingFee[]  @relation("CartonShippingFees")
}

model ShippingCompany {
  id                   Int           @id @default(autoincrement())
  userId               Int?
  cnCompanyName        String        @unique
  enCompanyName        String?
  code                 String?       @unique
  contactName          String?
  contactPhone         String?
  warehouseAddress     String?
  canShipToAmazon      Boolean?
  hasOverseasWarehouse Boolean?
  country              String?
  remark               String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  user                 User?         @relation(fields: [userId], references: [id])
  shippingFees         ShippingFee[]
}

model ShippingFee {
  id             Int             @id @default(autoincrement())
  channel        String
  costPerCarton  Float
  currency       String?
  remark         String?
  createdAt      DateTime        @default(now())
  address        String
  cartonConfigId Int
  companyId      Int
  country        String
  endDate        DateTime?
  productSku     String
  startDate      DateTime?
  updatedAt      DateTime        @updatedAt
  userId         Int?
  carton         CartonConfig    @relation("CartonShippingFees", fields: [cartonConfigId], references: [id])
  company        ShippingCompany @relation(fields: [companyId], references: [id])
  product        Product         @relation("ProductShippingFees", fields: [productSku], references: [sku])
  user           User?           @relation(fields: [userId], references: [id])
}

model Inventory {
  id         Int      @id @default(autoincrement())
  location   String?
  quantity   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  productSku String   @unique
  userId     Int?
  product    Product  @relation(fields: [productSku], references: [sku])
  user       User?    @relation(fields: [userId], references: [id])
}
